フロント側開発環境構築：
    1.node.jsのインストール
    node.jsをインストールすれば、node.jsとnpm両方使える。

    2.gitのインストール
    gitをインストールすれば、GitHub,GitLabにソースを管理できる。

    設定手順：
        1.任意のところに右クリックして、git bashを選択して、押下するとコマンドダイヤログが表示される。
        メールアドレスの登録
            git config --global user.name "githubのユーザー名"
            git config --global user.name "loujun119"
            git config --global user.email "githubのメールアドレス"
            git config --global user.email "loujun119@yahoo.com"
        2.SSHキー設定
        2.1 SHHキー生成
            ssh-keygen -t rsa -C "githubのメールアドレス"
            3,4回Enterを押下して、キーが生成できる。
        2.2 SSHキー取得
            C:\ユーザー\ユーザー名\.sshに移動して、"隠しファイル"を設定して、隠しファイルが表示できるようにする
            ファイル「"id_rsa.pub"」を開く、全部をコピーする。
        2.3 GitLabやGitHubサイトにログインして、settingsを押下して、個人設定ページを開く、
            左側の「SSH and GPG keys」をクリックして、New SSH　keyボタンをクリックして、2.2でコピーされた内容を
            ペーストする。

    3.TortoiseGitのインストール
    TortoiseGitをインストールすれば、gitでソースコードをclone,pull,commit,pushできる。(pull,commit,pushはVS Codeで実行したほうが良い)

    4.yarnのインストール
    yarnはnpmと同じ、ラボラトリー管理、プロジェクトのstart,buildができる。
    yarnはnpmより、ラボラトリーをダウンロードする時、バージョンの設定ほうが良い。
    npmは時々ラボラトリーをインストール失敗のことが発生する。

    5.Postmanのインストール
    Postmanをインストールすれば、サーバ側のAPI(確認)テストができる。

    6.VS Codeのインストール
    フロント側開発専用ツール。
    お勧めExtensions:
    1.Bracket Pair Colorizer 2
    2.Auto Rename Tag
    3.Beautify
    4.Code Spell Checker
    5.css-auto-prefix
    6.Eclipse Keymap(個人用)
    7.ES7+ React/Redux/React-Native snippets
    8.ESLint
    9.Git Graph
    10.Git History
    11.HTML CSS Support
    12.HTML Snippets
    13.HTML to CSS autocompletion
    14.Live Server
    15.npm Intellisense
    16.Prettier - Code formatter
    17.Simple React Snippets
    18.Trailing Spaces

関連の開発ツール：
    7.WinMerger
    差分を洗い出す
    8.Sakura
    テキストファイル用
    9.7-Zip
    ZIP圧縮、展開

    10.Chrome と Edgeの拡張機能
    10.1 React Developer Tools
        reactプロジェクトのコンポーネント構成を確認できる。
    10.2 Redux DevTools
        reduxのstoreに保存されてるデータが確認できる。

    react: 18.1.0;
    redux: 4.2.0
    typescript: 4.6.0
    node: 16.15.0
    npm: 8.5.5
    yarn: 1.22.18
    https://github.com/loujun119

【VSCode】ReactとTypeScript、ESLint、Prettier、Airbnbで環境構築する手順
  ソースコードフォーマット：
  1.ESLintの導入
    1.1 ラボラトリーのインストール
      1.1.1 ESLint本体
        yarn add eslint --dev
    1.2 eslint設定ファイルを生成させる。
      以下のコマンドを実行する
      npm init @eslint/config

      入力すると、いくつの選択問題がある
      1.How would you like to use ESLint?
        To check syntax, find problems
      2.What type of modules does your project use?
        JavaScript modules(import/export)
      3.Which framework does your project use?
        React
      4.Does your project use TypeScript?
        Yes
      5.Where does your code run?
        Browser
      6.How would you like to define a style for your project?
        Use a popular style guide
      7.Which style guide do you want to follow?
        Airbnb: https://gihub.com/airhnb/JavaScript
      8.What format do you want your config file to be in?
        JSON(JavaScriptも大丈夫です。)
      9.Would you like to install them now?
        Yes
      10.which package manager do you want to use
        yarn

      完了後、プロジェクトの直下に.eslintrc.jsonファイルが生成された。
      関連のラボラトリーが自動的に導入された。
        1.ESLintにAirbnbスタイル
          eslint-config-airbnb
        2.ESLintにES Modulesのルール
          eslint-plugin-import
        3.ESLintにJSXのルール
          eslint-plugin-jsx-a11y
        4.ESLintにReactのルール
          eslint-plugin-react
        5.ESLintにReact Hooksのルール
          eslint-plugin-react-hooks
        6.ESLintにTypeScriptのルールを追加
          @typescript-eslint/parser
        7.ESLintでTypeScriptの解析をする用
          @typescript-eslint/eslint-plugin

    1.3 足りないパッケージを追加する
      1.3.1 AirbnbをTypeScriptで強化する
        yarn add eslint-config-airbnb-typescript --dev

    1.4 .eslintrc.jsonファイルを更新
      以下の内容を追加する
      {
        "env": {
            "browser": true,
            "es2021": true
        },
        "parser": "@typescript-eslint/parser",
        "extends": [
            "plugin:react/recommended",
            "airbnb",
            // add start
            "airbnb/hook",
            "plugin:@typescript-eslint/recommended",
            "plugin:@typescript-eslint/recommended-requiring-type-checking"
            // add end
        ],
        "parserOptions": {
            "ecmaFeatures": {
                "jsx": true
            },
            "ecmaVersion": 12, // latestから12に変更
            "sourceType": "module"
        },
        "plugins": [
            "react",
            "@typescript-eslint"
        ],
        // add start react対応
        "settings": {
            "react": {
                "pragma": "react",
                "version": "detect"
            }
        },
        // add end
        "rules": {
        }
      }

  2.prettierの導入
    2.1 ラボラトリーのインストール
      2.1.1 prettier本体
        yarn add prettier --dev
      2.1.2 eslint-config-pretterは、ESLintのルールをいちいち手動でOFFにする必要をなくすためのライブラリでeslintとprettierを共存させるなら入れておくと簡単に設定してくれます。
        yarn add eslint-config-prettier --dev
      2.1.3 eslintのルールをprettierに変更する
        yarn add eslint-plugin-prettier --dev

    2.2 prettier設定ファイルを作成する
      プロジェクトの直下に.prettierrc.jsファイルを新規作成して、以下の内容を追加する(簡単なソースコードチェックルール)
      module.exports = {
          "printWidth": 120,
          "semi": false,
          "singleQuote": true,
          "trailingComma": "all",
          "bracketSpacing": false,
          "jsxBracketSameLine": true,
          "arrowParens": "avoid",
          "insertPragma": true,
          "tabWidth": 4,
          "useTabs": false
      };
    
    4.ESLintとPrettierの連携設定




      1.10 使っていないimportを自動で削除する
        yarn add eslint-plugin-unused-imports --dev


    4.ESLintとPrettierの連携設定
      .eslintrc.jsonを開く、以下の内容を追加する。
      {
        "env": {
            "browser": true,
            "es2021": true
        },
        "extends": [
            "plugin:react/recommended",
            "airbnb",
            "airbnb-typescript", //追加
            "airbnb/hooks", //追加
            "plugin:@typescript-eslint/recommended", //型を必要としないプラグインの推奨ルールをすべて有効
            "plugin:@typescript-eslint/recommended-requiring-type-checking", //型を必要とするプラグインの推奨ルールをすべて有効
            "prettier"  //追加 ESLintの情報に沿ってフォーマット

        ],
        "parser": "@typescript-eslint/parser",
        "parserOptions": {
            "ecmaFeatures": {
                "jsx": true
            },
            "ecmaVersion": 12, //latestから12に変更
            "sourceType": "module",
            "tsconfigRootDir": "__dirname", //追加 tsconfig.jsonがある相対パスを指定
            "project": ["./tsconfig.json"] //追加  tsconfig.jsonを指定
        },
        "plugins": [
            "react",
            "@typescript-eslint",
            "unused-imports" //追加 使っていないimportを自動で削除用
        ],
        "ignorePatterns": ["build", ".eslintrc.js"], //追加 .eslintignoreに対象外にしているが無いとコンパイルに時間がかかる

        /*-- ↓以下追加 --*/
        "rules": {
            "no-use-before-define": "off", //関数や変数が定義される前に使われているとエラーになるデフォルトの機能をoff
            "@typescript-eslint/no-use-before-define": ["error"], //typescript側のno-use-before-defineを使うようにする
            "import/prefer-default-export": "off", //named exportがエラーになるので使えるようにoff
            "@typescript-eslint/no-unused-vars": "off", //unused-importsを使うため削除
            "unused-imports/no-unused-imports": "error", //不要なimportの削除
            "unused-imports/no-unused-vars": [ //unused-importsでno-unused-varsのルールを再定義
              "warn",
              { "vars": "all", "varsIgnorePattern": "^_", "args": "after-used", "argsIgnorePattern": "^_" }
            ],
            "react/function-component-definition": [//アロー関数以外受け付けない設定
              2,
              {
                "namedComponents": "arrow-function",
                "unnamedComponents": "arrow-function"
              }
            ],
            "no-param-reassign": [2, { "props": false }], //パラメーターのプロパティ変更を許可
            "import/extensions": [ //importのときに以下の拡張子を記述しなくてもエラーにしない
              "error",
              {
                "js": "never",
                "jsx": "never",
                "ts": "never",
                "tsx": "never"
              }
            ],
            "react/jsx-filename-extension": [ //jsx形式のファイル拡張子をjsxもしくはtsxに限定
              "error",
              {
                "extensions": [".jsx", ".tsx"]
              }
            ],
            "react/react-in-jsx-scope": "off", //import React from "react"が無くてもエラーを無くす
            "react/prop-types": "off", //TypeScriptでチェックしているから不要。offにする
            "no-void": [ //void演算子の許可
              "error",
              {
                "allowAsStatement": true
              }
            ]
          },
          "settings": {
            "import/resolver": { //importするファイルをjsだけではなく、tsを含むファイルを許可する
              "node": {
                "paths": ["src"],
                "extensions": [".js", ".jsx", ".ts", ".tsx"]
              }
            }
          }
          /*-- ↑追加ここまで --*/
      }

    5.ESLintを適用させないファイルを作成する
      プロジェクトの直下に.eslintignoreファイルを新規作成して、以下の内容を追加する
      build/
      public/
      **/node_modules/
      *.config.js
      .*lintrc.js
      /*.*

    6.ESLintでフォーマットするコマンドを登録
    package.jsonを開いて、scriptsにESLintでフォーマットするためのコマンドを登録しておきます
        "lint": "eslint --ext 'src/**/*.{js,jsx,ts,tsx}'", //エラーチェック
        "format": "eslint --cache --fix 'src/**/*.{js,jsx,ts,tsx}' && prettier --write 'src/**/*.{js,jsx,ts,tsx}'" //ESLintとPrettierによるフォーマット

    7.VSCode上でESLintとPrettierを連携させる
      VSCodeでファイルを保存したタイミングでESLintとPreiiterによるエラーチェック、フォーマットを実行させるには、VSCodeの拡張機能をインストールして設定する必要があります。
      7.1 VSCodeの拡張機能であるESLintとPrettierをインストール
        ESLintとPrettier - Code formatter
      7.2 vscodeのメニューfile -> Preferences -> settingsでvscodeの設定ページを開く、右上にあるOpen Settings(UI)ボタンをクリックすると、setting.jsonファイルを開く。
        

